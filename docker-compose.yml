# version: "2"

services:

  web:
    # the application's web service (container) will use an image based on our Dockerfile
    build: "."
    # Map the internal port 80 to port 8000 on the host
    ports:
      - "8100:80"
    # Map the host directory to app (which allows us to see and edit files inside the container)
    volumes:
      - ".:/app:rw"
      - "./data:/data:rw"
    # The default command to run when launching the container
    command: python manage.py runserver 0.0.0.0:80
    # a link to database_default, the application's local database service
    links:
      - "database_default"
    env_file: .env-local


  database_default:
    # the application's web service will use an off-the-shelf image
    image: postgres:15.7-alpine
    environment:
      POSTGRES_DB: "db"
      POSTGRES_HOST_AUTH_METHOD: "trust"
      SERVICE_MANAGER: "fsm-postgres"
    volumes:
      - ".:/app:rw"

# The docker-compose.yml file is __only__ used for local development.
# This means that changes to this file will not affect cloud deployments in any way.
# Read more at https://docs.divio.com/reference/docker-docker-compose/
# services:
#   web:
#     build: .
#     ports:
#       - "8100:80"
#     volumes:
#       - ".:/app:rw"
#       - "./data:/data:rw"
#     environment:
#       DATABASE_URL: postgres://postgres@database_default:5432/db
#     links:
#       - "database_default"
#     # The following command is used to start the local development server.
#     # Removing this line will mimic the deployment behaviour on Divio Cloud.
#     command: python manage.py runserver 0.0.0.0:80

#   database_default:
#     image: postgres:15.7-alpine
#     environment:
#       POSTGRES_DB: "db"
#       POSTGRES_HOST_AUTH_METHOD: "trust"
#     volumes:
#       - ".:/app:rw"
